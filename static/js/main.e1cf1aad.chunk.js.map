{"version":3,"sources":["mike.svg","pages/Nav.js","pages/Home.js","pages/Prosjekt.js","pages/Portfolio.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","id","className","src","mike","alt","to","Home","Prosjekt","name","desc","tech","ProsjektList","useState","prosjekter","map","prosjekt","About","App","path","exact","component","Portfolio","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,gMCkB5BC,MAdf,WACI,OACI,yBAAKC,GAAG,UACJ,yBAAKC,UAAU,WAAf,IAA0B,yBAAKC,IAAMC,IAAOC,IAAI,OAAOJ,GAAG,UAC1D,wBAAIC,UAAU,UACV,kBAAC,IAAD,CAAMI,GAAG,KAAI,yCACb,kBAAC,IAAD,CAAMA,GAAG,cAAa,0CACtB,kBAAC,IAAD,CAAMA,GAAG,UAAS,yCCDnBC,MARf,WACI,OACI,yBAAKN,GAAG,QACJ,0C,QCUGO,EAbE,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMV,EAAS,EAATA,GAElC,OACI,yBAAKA,GAAIA,GACL,4BAAMQ,GACN,2BAAKC,GACL,2BAAKC,KCqBFC,EA1BM,WAAO,IAAD,EACaC,mBAAS,CACzC,CACIJ,KAAM,aACNE,KAAM,cACND,KAAM,gBACNT,GAAI,GAER,CACIQ,KAAM,aACNE,KAAM,cACND,KAAM,gBACNT,GAAI,KAZW,mBAChBa,EADgB,UAevB,OACI,oCACMA,EAAWC,KAAI,SAAAC,GAAQ,OACrB,kBAAC,EAAD,CAAUP,KAAMO,EAASP,KAAME,KAAMK,EAASL,KAAMD,KAAMM,EAASN,KAAMT,GAAIe,EAASf,UCXvFgB,MARf,WACI,OACI,6BACI,uC,OCmBGC,MAhBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKhB,UAAU,OAEb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,KAAK,IAAIC,OAAK,EAACC,UAAWd,IACjC,kBAAC,IAAD,CAAOY,KAAK,aAAaE,UAAWC,IACpC,kBAAC,IAAD,CAAOH,KAAK,SAASE,UAAWJ,QCLtBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e1cf1aad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mike.a0ac8c91.svg\";","import React from 'react';\r\nimport { Link }  from 'react-router-dom';\r\nimport mike from '../mike.svg';\r\n\r\nfunction Nav(){\r\n    return(\r\n        <nav id=\"burger\">\r\n            <div className=\"knappen\"> <img src={ mike } alt=\"logo\" id=\"logo\" /></div>\r\n            <ul className=\"linker\">\r\n                <Link to=\"/\"><li>Homepage</li></Link>\r\n                <Link to=\"/portfolio\"><li>Portfolio</li></Link>\r\n                <Link to=\"/about\"><li>About</li></Link>\r\n                \r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\nfunction Home(){\r\n    return (\r\n        <div id=\"hjem\">\r\n            <h1>Homepage</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst Prosjekt = ({ name, desc, tech, id }) => {\r\n    \r\n    return(\r\n        <div id={id}>\r\n            <h3>{ name }</h3>\r\n            <p>{ desc }</p>\r\n            <p>{ tech }</p>\r\n    \r\n\r\n        </div>\r\n    );\r\n        }\r\n\r\nexport default Prosjekt;","import React, {useState} from 'react';\r\nimport Prosjekt from './Prosjekt';\r\n\r\nconst ProsjektList = () => {\r\n    const [prosjekter, setProsjekter] = useState([\r\n        {\r\n            name: 'Prosjekt 1',\r\n            tech: 'Tech List 1',\r\n            desc: 'Description 1',\r\n            id: 1\r\n        },\r\n        {\r\n            name: 'Prosjekt 2',\r\n            tech: 'Tech List 2',\r\n            desc: 'Description 2',\r\n            id: 2\r\n        }\r\n    ]);\r\n    return (\r\n        <>\r\n            { prosjekter.map(prosjekt =>(\r\n                <Prosjekt name={prosjekt.name} tech={prosjekt.tech} desc={prosjekt.desc} id={prosjekt.id} />\r\n            )) }\r\n        </>\r\n    )\r\n};\r\n\r\n\r\n\r\nexport default ProsjektList;","import React from 'react';\r\n\r\nfunction About(){\r\n    return (\r\n        <div>\r\n            <h1>About</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport './App.css';\nimport Nav from './pages/Nav';\nimport Home from './pages/Home';\nimport Portfolio from './pages/Portfolio';\nimport About from './pages/About';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        \n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/portfolio\" component={Portfolio} />\n          <Route path=\"/about\" component={About} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}